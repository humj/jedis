##################################################################
# Properties for redis instances configurations
redis.shard.infos=localhost:6379, localhost:6370
##################################################################

##################################################################
# The cap on the number of "idle" instances in the pool. If maxIdle
# is set too low on heavily loaded systems it is possible you will see 
# objects being destroyed and almost immediately new objects being created.
# This is a result of the active threads momentarily returning objects 
# faster than they are requesting them them, causing the number of idle 
# objects to rise above maxIdle. The best value for maxIdle for heavily 
# loaded system will vary but the default is a good starting point.
# Uncomment the blow line to set your custom value
#redis.pool.maxidle=8
##################################################################

##################################################################
# The minimum number of objects allowed in the pool before the 
# evictor thread (if active) spawns new objects. Note that no objects
# are created when numActive+numIdle>=maxActive. This setting has no 
# effect if the idle object evictor is disabled.
# Uncomment the blow line to set your custom value
#redis.pool.minidle=0
##################################################################

##################################################################
# The cap on the number of objects that can be allocated by the pool
# (checked out to clients, or idle awaiting checkout) at a given time.
# Use a negative value for no limit.
# Uncomment the blow line to set your custom value
#redis.pool.maxactive=8
##################################################################

##################################################################
# The maximum amount of time (in milliseconds) the borrowObject method
# should block before throwing an exception when the pool is exhausted
# and the "when exhausted" action is WHEN_EXHAUSTED_BLOCK. When less 
# than or equal to 0, the borrowObject method may block indefinitely.
# Uncomment the blow line to set your custom value
#redis.pool.maxwait=-1
##################################################################

##################################################################
# The action to take when the borrowObject method is invoked when the 
# pool is exhausted (the maximum number of "active" objects has been 
# reached). The action code must be one of 1(WHEN_EXHAUSTED_BLOCK), 
# 0(WHEN_EXHAUSTED_FAIL), 2(WHEN_EXHAUSTED_GROW).
# Uncomment the blow line to set your custom value
#redis.pool.whenexhaustedaction=1
##################################################################

##################################################################
# When true, objects will be validated before being returned to the pool
# within the returnObject.
# Uncomment the blow line to set your custom value
#redis.pool.testonreturn=false
##################################################################

##################################################################
# When true, objects will be validated before being returned by the
# borrowObject method. If the object fails to validate, it will be 
# dropped from the pool, and we will attempt to borrow another.
# Uncomment the blow line to set your custom value
#redis.pool.testonborrow=false
##################################################################

##################################################################
# When true, objects will be validated by the idle object evictor (if 
# any). If an object fails to validate, it will be dropped from the pool.
# Uncomment the blow line to set your custom value
#redis.pool.testwhileidle=false
##################################################################

##################################################################
# The max number of objects to examine during each run of the idle 
# object evictor thread (if any). When a negative value is supplied, 
# ceil(getNumIdle)/abs(getNumTestsPerEvictionRun) tests will be run.
# That is, when the value is -n, roughly one n-th of the idle objects
# will be tested per run. When the value is positive, the number of tests
# actually performed in each run will be the minimum of this value and 
# the number of instances idle in the pool.
# Uncomment the blow line to set your custom value
#redis.pool.numtestsperevictionrun=-1
##################################################################

##################################################################
# The number of milliseconds to sleep between runs of the idle object 
# evictor thread. When non-positive, no idle object evictor thread will be
# run.
# Uncomment the blow line to set your custom value
#redis.pool.timebetweenevictionrunsmillis=30000
##################################################################

##################################################################
# The minimum amount of time an object may sit idle in the pool before 
# it is eligible for eviction by the idle object evictor (if any). When
# non-positive, no objects will be evicted from the pool due to idle 
# time alone.
# Uncomment the blow line to set your custom value
#redis.pool.minevictableidletimemillis=60000
##################################################################

##################################################################
# The minimum amount of time an object may sit idle in the pool before
# it is eligible for eviction by the idle object evictor (if any), with
# the extra condition that at least "minIdle" object instances remain
# in the pool. When non-positive, no objects will be evicted from the pool
# due to idle time alone.
# Uncomment the blow line to set your custom value
#redis.pool.softminevictableidletimemillis=-1
##################################################################